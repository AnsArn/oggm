.. _glacierdir:

Glacier working directories
===========================

See also: :py:class:`~oggm.GlacierDirectory`

The majority of OGGM tasks are so-called "entity tasks". They
are standalone operations to be realized on one single glacier entity. These
tasks are executed sequentially: they often need input
generated by the previous task(s).

In order to avoid complicated chains of arguments, each task will read the
input data from a glacier-specific directory and writes its output into the
same directory, making the new data available for further computations.

These data files and their names are standardized and listed in the
:py:mod:`oggm.cfg` module. If you want to implement your own task you'll
have to
add an entry to this file too.


Glacier divides
---------------

The glacier outlines provided by the RGI are the result of an automated
(sometimes manually corrected) delineation
procedure. In some cases, the RGI glacier is not the outline of a single
glacier (in the dynamical sense) but is the outline of a "glacier
complex". OGGM does not (yet) implement a method to divide these glacier
complexes into individual glaciers [1]_, but it does have a framework to
deal with user provided glacier divides.

An RGI entity can have one or more "divides", stored as polygons in a
separate shapefile (:py:func:`oggm.cfg.set_divides_db`).
Several OGGM tasks (such as :py:func:`~oggm.tasks.compute_centerlines`)
can work properly on single glaciers only, as shown on the example below
(*left*: with divides, *right*: without).

    .. image:: ../oggm/tests/baseline_images/test_graphics/test_centerlines_1.5.0.png
        :width: 49%
    .. image:: ../oggm/tests/baseline_images/test_graphics/test_nodivide_1.5.0.png
        :width: 49%

The divides are handled as sub-directories in the glacier directory: each
sub-directory stores the files specific to that divide. All the glaciers
have at least one divide ("divide_01"), the divide ID 0 being reserved for
the root directory which contains files concerning the entire RGI glacier.
The tasks that work on divides only can be recognized by their ``div_id=None``
keyword argument (they also implement the
:py:class:`~oggm.divide_task` decorator).


.. [1] Kienholz, C., Hock, R., & Arendt, A. a. (2013). A new semi-automatic approach for dividing glacier complexes into individual glaciers. Journal of Glaciology, 59(217), 925â€“937.

.. _basenames:

cfg.BASENAMES
-------------

This is a list of the files that can be found in the glacier directory or
its divides:

